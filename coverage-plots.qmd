---
title: "Exogenous RNA Coverage Plots"
author: "Lance Parsons"
format:
  html:
    toc: true
    code-fold: true
    df-print: paged
    embed-resources: true
    fig-format: svg
editor: source
params:
  normalization: "human_small_rna"
  # human_small_rna, exogenous_rna, exogenous_rna_total
---

# Load libraries

This project uses [`renv`](https://rstudio.github.io/renv/articles/renv.html)
to keep track of installed packages. Install `renv` if not installed and load
dependencies with `renv::restore()`.

```r
install.packages("renv")
renv::restore()
```

```{r}
#| label: load-packages
#| include: false
#| message: false
library("readr")
library("dplyr")
library("Rsamtools")
library("tidyr")
library("stringr")
library("GenomicAlignments")
library("plyranges")
library("Gviz")
options(ucscChromosomeNames = FALSE)
```

# Read sample data

{{< include _sample-metadata.qmd >}}

# Exogenous RNA counts

{{< include _exogenous-alignments.qmd >}}

# Human small RNA gene counts

{{< include _human-small-rna-counts.qmd >}}

```{r}
#| label: get-normalization-text
normalization_text_options <- list(
  "human_small_rna" = "Total Human Small RNA",
  "exogenous_rna" = "Total Exogeouns RNA",
  "exogenous_rna_category" = "Exegenous RNA Activity Category"
)
normalization_text <- normalization_text_options[[params$normalization]]
```

# Coverage plots: Normalized by `r normalization_text`

```{r}
#| label: get-normalization-factor

normalization_factor <- function(sample_unit, rna_species, category) {
  norm_factor <- NA
  if (params$normalization == "human_small_rna") {
    # Total number of human small rna fragments
    norm_factor <- gene_counts %>%
      pivot_longer(
        cols = -"gene",
        names_to = "sample_unit",
        values_to = "count"
      ) %>%
      group_by(.data$sample_unit) %>%
      summarize(count = sum(.data$count, na.rm = TRUE)) %>%
      dplyr::filter(.data$sample_unit == !!sample_unit) %>%
      pull(count)
  } else if (params$normalization == "exogenous_rna") {
    # Total number of exogenous rna fragments
    norm_factor <- exogenous_rna_mapped_totals %>%
      dplyr::filter(
        .data$sample_unit == !!sample_unit,
        .data$sequence_name == !!rna_species
      ) %>%
      dplyr::pull("mapped_fragments")
  } else if (params$normalization == "exogenous_rna_category") {
    # Number of exogenous rna fragments in a given category
    norm_factor <- exogenous_rna_count_data %>%
      dplyr::filter(
        sample_unit == !!sample_unit,
        sequence_name == !!rna_species,
        category == !!category
      ) %>%
      pull(count)
  } else {
    # Invalid normalization parameter
    stop(sprintf("Invalid normalization parameter %s", params$normalization))
  }
  return(norm_factor)
}
```

```{r fig.height=8, fig.width=15}
#| label: coverage-plots
# Line colors and types for each series
plot_styles <- list(
  "Parental" = list( # nolint: object_name_linter
    "active_cis" = list("color" = "#800000", "lty" = "solid"),
    "active_trans" = list("color" = "#a84d3b", "lty" = "solid"),
    "inactive_cryptic_terminiation" = list(
      "color" = "#cb8777",
      "lty" = "dotted"
    ),
    "inactive_other" = list("color" = "#e8c2b9", "lty" = "dotted")
  ),
  "P1E10" = list( # nolint: object_name_linter
    "active_cis" = list("color" = "#003869", "lty" = "solid"),
    "active_trans" = list("color" = "#4f648d", "lty" = "solid"),
    "inactive_cryptic_terminiation" = list(
      "color" = "#8995b2",
      "lty" = "dotted"
    ),
    "inactive_other" = list("color" = "#c3c8d8", "lty" = "dotted")
  )
)

# Loop over species and plot coverage
for (rna_species in rna_mixes %>%
  pull(rna_species) %>%
  unique()) {
  gtrack <- GenomeAxisTrack()

  # Read FASTA sequence and trim off description (after space)
  dna <- readDNAStringSet(
    sprintf("data/references/exogenous-rna/%s.fa", rna_species)
  )
  names(dna) <- names(dna) %>% str_remove(" +.*$")
  sequence_track <- SequenceTrack(dna,
    genome = rna_species,
    chromosome = rna_species,
    cex = 0.5
  )

  # Get list of sample units we will plot
  sample_units_to_plot <- sample_units %>%
    dplyr::filter(sample_unit %in% names(rna_species_plot_data[[rna_species]]))

  # Loop over days to create two overlay tracks
  day_tracks <- list()
  day_ylims <- list()
  days_to_plot <- sample_units_to_plot %>%
    pull(day) %>%
    levels()
  for (day in days_to_plot) {
    # Get sample units for day
    sample_units_for_day <- sample_units_to_plot %>%
      filter(day == {{ day }}) %>%
      pull(sample_unit)

    # Loop over sample units for this day
    data_tracks <- list()
    for (sample_unit in sample_units_for_day) {
      cell_line <- sample_units_to_plot %>%
        filter(sample_unit == {{ sample_unit }}) %>%
        pull(cell_line) %>%
        toString()
      for (category in
        names(rna_species_plot_data[[rna_species]][[sample_unit]])) {
        # Calculate coverage
        data <- as(
          coverage(
            rna_species_plot_data[[rna_species]][[sample_unit]][[category]]
          ),
          "GRanges"
        ) %>%
          # Remove non-matching sequences
          keepSeqlevels(rna_species, pruning.mode = "coarse")

        # Normalize scores
        norm_factor <- normalization_factor(sample_unit, rna_species, category)
        score(data) <- score(data) / norm_factor

        # Create GViz data track
        data_track <- DataTrack(data,
          name = day,
          type = "l",
          col = plot_styles[[cell_line]][[category]]$color,
          lty = plot_styles[[cell_line]][[{{ category }}]]$lty,
          strand = "*"
        )
        data_tracks <- c(data_tracks, data_track)
      }
    } # end sample_unit loop
    day_tracks[[day]] <- OverlayTrack(trackList = data_tracks, name = day)
    day_ylims[[day]] <- ylims <- extendrange(range(lapply(data_tracks, values)))
  } # end day loop

  start <- rna_mixes %>%
    filter(rna_species == {{ rna_species }}) %>%
    pull(start) %>%
    unique()
  end <- rna_mixes %>%
    filter(rna_species == {{ rna_species }}) %>%
    pull(end) %>%
    unique()

  annotations <- read_tsv(
    sprintf("data/references/exogenous-rna/%s.bed", rna_species),
    col_names = c("chrom", "chromStart", "chromEnd", "name"),
    col_types = "ciic"
  )

  annotations_positions <- annotations %>%
    dplyr::filter(name %in% c(
      "cryptic_terminator_end", "sgRNA_end", "edit",
      "nick", "pegRNA_end", "terminator_end"
    ))

  annotation_track <- AnnotationTrack(
    chromosome = rna_species,
    start = annotations$chromStart + 1,
    end = annotations$chromEnd,
    id = annotations$name,
    fill = "#cfafc3",
    featureAnnotation = "id",
    fontcolor.feature = "#666666",
    name = "(e)pegRNA features"
  )

  ht <- HighlightTrack(
    trackList = c(sequence_track, annotation_track, day_tracks),
    start = annotations_positions$chromStart + 1,
    end = annotations_positions$chromEnd,
    chromosome = rna_species,
    col = "darkgrey",
    fill = "#FFFFFF00",
    lwd = 0.5
  )

  plotTracks(c(gtrack, ht),
    chromosome = rna_species,
    from = start,
    to = end,
    ylim = c(0, max(unlist(day_ylims))),
    main = rna_species,
    lwd = 3
  )
}
```
