---
title: "Exogenous RNA Coverage Plots"
author: "Lance Parsons"
format:
  html:
    toc: true
    code-fold: true
    df-print: paged
    embed-resources: true
    fig-format: svg
editor: source
params:
  normalization: "human_small_rna"
  # human_small_rna, exogenous_rna, exogenous_rna_total
---

# Load libraries

This project uses [`renv`](https://rstudio.github.io/renv/articles/renv.html)
to keep track of installed packages. Install `renv` if not installed and load
dependencies with `renv::restore()`.

```r
install.packages("renv")
renv::restore()
```

```{r}
#| label: load-packages
#| include: false
#| message: false
library("readr")
library("dplyr")
library("Rsamtools")
library("tidyr")
library("stringr")
library("forcats")
library("GenomicAlignments")
library("plyranges")
library("rlang")
library("ggplot2")
library("RColorBrewer")
```

# Read sample data

{{< include _sample-metadata.qmd >}}

# Exogenous RNA counts

{{< include _exogenous-alignments.qmd >}}

# Human small RNA gene counts

{{< include _human-small-rna-counts.qmd >}}

## Human small RNA gene totals

```{r}
#| label: sum-human-small-rna
human_rna_totals <- human_gene_counts %>%
  pivot_longer(
    cols = -"gene",
    names_to = "sample_unit",
    values_to = "count"
  ) %>%
  group_by(.data$sample_unit) %>%
  summarize(count = sum(.data$count, na.rm = TRUE))

### Export human RNA totals
write_tsv(human_rna_totals, "human_rna_count_totals.tsv")
human_rna_totals
```

# Coverage plots

## Plot aesthetics

{{< include _plot-aesthetics.qmd >}}

## Normalization function
```{r}
#| label: get-normalization-factor

normalization_factor <- function(sample_unit,
                                 rna_species,
                                 category,
                                 normalization) {
  norm_factor <- NA
  if (normalization == "human_small_rna") {
    # Total number of human small rna fragments
    norm_factor <- human_rna_totals %>%
      dplyr::filter(.data$sample_unit == !!sample_unit) %>%
      pull(count)
  } else if (normalization == "exogenous_rna") {
    # Total number of exogenous rna fragments
    norm_factor <- exogenous_rna_mapped_totals %>%
      dplyr::filter(
        .data$sample_unit == !!sample_unit,
        .data$sequence_name == !!rna_species
      ) %>%
      dplyr::pull("mapped_fragments")
  } else if (normalization == "exogenous_rna_category") {
    # Number of exogenous rna fragments in a given category
    norm_factor <- exogenous_rna_count_data %>%
      dplyr::filter(
        sample_unit == !!sample_unit,
        sequence_name == !!rna_species,
        category == !!category
      ) %>%
      pull(count)
  } else {
    # Invalid normalization parameter
    stop(sprintf("Invalid normalization parameter %s", normalization))
  }
  return(norm_factor)
}
```


```{r, fig.height=5, fig.width=10}
#| label: coverage-plots
#| fig-height: 5
#| fig-width: 10

# Loop over exogenous rna species
rna_species_plots <- list()
for (rna_species in rna_mixes %>%
  pull(rna_species) %>%
  unique()) {
  # Get list of sample units we will plot
  sample_units_to_plot <- sample_units %>%
    dplyr::filter(sample_unit %in% names(rna_species_plot_data[[rna_species]]))

  # Loop over days
  days_to_plot <- sample_units_to_plot %>%
    pull(day) %>%
    levels()
  for (day in days_to_plot) {
    # Get sample units for day
    sample_units_for_day <- sample_units_to_plot %>%
      filter(day == {{ day }}) %>%
      pull(sample_unit)

    day_data <- tibble(
      rna_species = character(),
      postion = numeric(),
      coverage = numeric(),
      sample_unit = character(),
      cell_line = factor(),
      category = factor(),
      cov_human_norm = numeric(),
      cov_cateory_norm = numeric()
    )

    # Loop over sample units for this day
    for (sample_unit in sample_units_for_day) {
      cell_line <- sample_units_to_plot %>%
        filter(sample_unit == {{ sample_unit }}) %>%
        pull(cell_line) %>%
        toString()

      for (category in
        names(rna_species_plot_data[[rna_species]][[sample_unit]])) {
        # Calculate coverage
        data <- coverage(rna_species_plot_data[[rna_species]]
        [[sample_unit]][[category]])[[rna_species]]

        # Organize into a tibble
        category_data <- tibble(
          rna_species = rna_species,
          coverage = as.numeric(data),
          sample_unit = sample_unit,
          cell_line = as.factor(cell_line),
          category = as.factor(category)
        ) %>%
          tibble::rowid_to_column("position")

        # Normalize scores
        norm_factor_human <- normalization_factor(
          sample_unit, rna_species, category, "human_small_rna"
        )
        norm_factor_category <- normalization_factor(
          sample_unit, rna_species, category, "exogenous_rna_category"
        )
        category_data <- category_data %>%
          mutate(human_small_rna = (coverage / norm_factor_human) * 1e6) %>%
          mutate(exogenous_rna_category = coverage / norm_factor_category)

        # Append to sample unit data
        day_data <- rbind(day_data, category_data)
      }
    }
    categories_to_plot <- c("active_cis", "active_trans")
    normalizations_to_plot <- c("human_small_rna", "exogenous_rna_category")

    normalization_labs <- as_labeller(c(
      human_small_rna = "per million human small rna",
      exogenous_rna_category = "as fraction of reads in category"
    ))


    annotations <- read_tsv(
      sprintf("data/references/exogenous-rna/%s.bed", rna_species),
      col_names = c("chrom", "chromStart", "chromEnd", "name"),
      col_types = "ciic"
    )
    pegrna_offset <- annotations %>%
      filter(name == "protospacer") %>%
      pull(chromStart)
    annotations <- annotations %>%
      dplyr::mutate(
        chromStart = chromStart - pegrna_offset,
        chromEnd = chromEnd - pegrna_offset
      )

    # Locations for vertical lines
    # Lines at start of annotation
    annotation_lines <- annotations %>%
      filter(name %in% c("protospacer", "PBS")) %>%
      mutate(x = chromStart - 0.5)
    # Edit line "on the base"
    annotation_lines <- rbind(
      annotation_lines,
      annotations %>%
        filter(name %in% c("edit")) %>%
        mutate(x = chromStart)
    )
    # Lines at end of annotation
    annotation_lines <- rbind(
      annotation_lines,
      annotations %>%
        filter(name %in% c("sgRNA_end", "pegRNA_end", "terminator_end")) %>%
        mutate(x = chromEnd + 0.5)
    )

    # Labels
    annotation_labels <- annotation_lines %>%
      select(name, x) %>%
      mutate(normalization = "exogenous_rna_category") %>%
      mutate(
        label = case_when(
          name == "protospacer" ~ "pegRNA start",
          name == "edit" ~ "edit",
          name == "PBS" ~ "PBS start",
          name == "sgRNA_end" ~ "sgRNA end",
          name == "pegRNA_end" ~ "pegRNA end",
          name == "terminator_end" ~ "Terminator end",
        ),
        label_just = case_when(
          name == "protospacer" ~ 0,
          name == "edit" ~ 1,
          name == "PBS" ~ 0,
          name == "sgRNA_end" ~ 1,
          name == "pegRNA_end" ~ 0,
          name == "terminator_end" ~ 0,
        ),
        nudge_x = case_when(label_just == 0 ~ 0.5, label_just == 1 ~ -0.5)
      )

    plot_data <- day_data %>%
      tidyr::pivot_longer(
        cols = c("coverage", "human_small_rna", "exogenous_rna_category"),
        names_to = "normalization",
        values_to = "coverage"
      ) %>%
      filter(category %in% categories_to_plot) %>%
      mutate(category = droplevels(category)) %>%
      filter(normalization %in% normalizations_to_plot) %>%
      mutate(position = position - pegrna_offset) %>%
      mutate(category = suppressWarnings(
        fct_relevel(category, category_level_order)
      )) %>%
      mutate(cell_line = fct_relevel(cell_line, cell_line_order))

    ylims_human <- range(plot_data %>%
      filter(normalization == "human_small_rna") %>%
      pull(coverage))
    ylims_exogenous <- range(plot_data %>%
      filter(normalization == "exogenous_rna_category") %>%
      pull(coverage))

    p <- ggplot(
      plot_data,
      aes(
        x = position,
        y = coverage,
        group = interaction(sample_unit, category),
        color = category,
        alpha = cell_line
      )
    ) +
      geom_line(lwd = 1) +
      scale_color_manual(
        name = "Exogenous RNA Category",
        values = exogenous_gene_colors[1:2],
        labels = category_labels
      ) +
      scale_alpha_manual(
        name = "Cell Line",
        labels = cell_line_order,
        values = c(1, 0.3)
      ) +
      guides(
        color = guide_legend(order = 1),
        linetype = guide_legend(order = 0)
      ) +
      ylab("Coverage (normalized)") +
      xlab("Position") +
      facet_wrap(
        facets = ~ factor(
          normalization,
          levels = c("human_small_rna", "exogenous_rna_category")
        ),
        scales = "free_y",
        ncol = 1,
        strip.position = "left",
        labeller = normalization_labs
      ) +
      ggtitle(paste(rna_species, "-", day)) +
      geom_vline(
        xintercept = annotation_lines$x,
        color = "#777777",
        alpha = 1,
        lwd = 0.5
      ) +
      geom_text(
        data = annotation_labels,
        aes(
          x = x,
          y = -diff(ylims_exogenous) * 0.05,
          label = label,
          hjust = label_just
        ),
        nudge_x = annotation_labels$nudge_x,
        show.legend = FALSE,
        color = "black",
        size = 2.5,
        inherit.aes = FALSE
      ) +
      scale_x_continuous(limits = c(-15, max(rna_mixes$end) - 5)) +
      theme_bw() +
      theme(
        strip.background = element_blank(),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        strip.placement = "outside",
        legend.position = "top"
      )
    print(p)
  }
}
```
