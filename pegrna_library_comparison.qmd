---
title: "pegRNA Library Comparison"
author: "Lance Parsons"
format:
  html:
    toc: true
    code-fold: true
    df-print: paged
    embed-resources: true
editor: source
---

```{r}
#| label: load-packages
#| include: false
#| message: false
library("readr")
library("dplyr")
library("tidyr")
library("stringr")
library("tibble")
library("pheatmap")
library("ggplot2")
library("DESeq2")
library("apeglm")
library("EnsDb.Hsapiens.v86")
library("RColorBrewer")
library("BiocParallel")
register(MulticoreParam(4))
```

## Read data

1. Get list of samples

```{r}
samples <- read_tsv("config/samples.tsv",
  col_types = list(
    sample_name = col_character(),
    cell_line = col_factor(),
    exogenous_rna = col_factor(),
    day = col_factor()
  )
)
units <- read_tsv("config/units.tsv",
  col_types = list(
    sample_name = col_character(),
    unit_name = col_character(),
    fq1 = col_character(),
    fq2 = col_character()
  )
)
sample_units <- dplyr::left_join(samples, units, by = "sample_name") %>%
  unite(sample_unit, sample_name, unit_name, remove = FALSE)
sample_units
```

2. Read Samtools `idxstats` to get human coverage for normalization

Notes:

* The counts include the total number of reads aligned, they 
  are not limited to uniquely aligned reads.
* The counts are reads, not pairs or fragments

```{r}
idxstats_exogenousrna_dir <-
  "results/samtools_idxstats/exogenous_rna/"

idxstats_human_dir <-
  "results/samtools_idxstats/Homo_sapiens.GRCh38.dna.primary_assembly/"

bowtie2_human_logs <-
  "results/logs/bowtie2/Homo_sapiens.GRCh38.dna.primary_assembly/"

idxstats <- tibble()

for (row in seq_len(nrow(sample_units))) {
  sample <- sample_units[row, ]$sample_unit

  # Read `idsxstats` for exogenous mapped reads
  exogenous_rna_stats <- read_tsv(
    file.path(idxstats_exogenousrna_dir, sprintf("%s.bam.idxstats", sample)),
    col_names = c(
      "sequence_name", "sequence_length",
      "mapped_reads", "unmapped_reads"
    ),
    col_types = "ciii"
  )
  exogenous_rna_mapped_reads <- exogenous_rna_stats %>%
    dplyr::filter(!sequence_name %in% c("*")) %>%
    dplyr::select(sequence_name, mapped_reads) %>%
    dplyr::mutate(sample = sample)

  # Read `idxstats` for human mapped reads
  human_stats <- read_tsv(
    file.path(idxstats_human_dir, sprintf("%s.bam.idxstats", sample)),
    col_names = c(
      "sequence_name", "sequence_length",
      "mapped_reads", "unmapped_reads"
    ),
    col_types = "ciii"
  )
  grch38_mapped_reads <- human_stats %>%
    dplyr::filter(!sequence_name %in% c("*")) %>%
    dplyr::select(mapped_reads) %>%
    sum()
  grch38_mapped_reads <- tibble(
    sequence_name = "grch38_mapped_reads",
    mapped_reads = grch38_mapped_reads,
    sample = sample
  )

  # Read bowtie2 logs for unmapped reads
  bowtie2_log <- readLines(
    file.path(bowtie2_human_logs, sprintf("%s.log", sample))
  )
  total_pairs <- strtoi(str_split(bowtie2_log[1], " ")[[1]][1])
  total_reads <- total_pairs * 2
  unmapped_reads <- tibble(
    sequence_name = "unmapped",
    mapped_reads = total_reads - grch38_mapped_reads$mapped_reads,
    sample = sample
  )

  # Consolidate counts for rows
  idxstats <- rbind(
    idxstats,
    exogenous_rna_mapped_reads,
    grch38_mapped_reads,
    unmapped_reads
  )
}
idxstats
```

## Sample Correlation

### BAM Correlation

Divide the human genome into bins, determine the counts in each of those bins and calculate the correlation between samples.

*Note:* May need to remove zero count bins

### Correlation of gene counts

*featureCounts*

* count only fully aligned fragments
* use the "exon" features in RNA Central GRCh38 annotation
* sum counts by "Name" attribute
* primary alignments were counted, even if the fragments aligned multiple times
* fragments aligning to multiple features were counted *for each feature*, meaning some fragments were counted multiple times

```{r}
feature_counts_dir <- "results/featureCounts/"
feature_counts_files <- paste0(
  feature_counts_dir,
  sample_units$sample_unit,
  "_noncoding_exon_name.featureCounts"
)
feature_counts_first <- readr::read_tsv(
  feature_counts_files[1],
  comment = "#",
  col_types = list(
    Geneid = col_character(),
    Chr = col_character(),
    Start = col_character(),
    End = col_character(),
    Strand = col_character(),
    Length = col_integer(),
    type = col_skip(),
    .default = col_integer()
  )
) %>%
  rename_all(~ stringr::str_replace_all(
    ., "results/alignments/Homo_sapiens.GRCh38.dna.primary_assembly/sorted/", ""
  )) %>%
  rename_all(~ stringr::str_replace_all(., ".bam", ""))

feature_counts_list <- vector("list")
for (i in 2:length(feature_counts_files)) {
  feature_counts_list[[i]] <- 
    readr::read_tsv(
  feature_counts_files[i],
  comment = "#",
  col_types = "-------i"
  ) %>%
  rename_all(~ stringr::str_replace_all(
    ., "results/alignments/Homo_sapiens.GRCh38.dna.primary_assembly/sorted/", ""
  )) %>%
  rename_all(~ stringr::str_replace_all(., ".bam", ""))
}

feature_counts <- dplyr::bind_cols(feature_counts_list)
feature_counts <- cbind(feature_counts_first, feature_counts)
feature_counts
```

Read these counts into DESeq2 along with the sample metadata.

Set the design to `~ exogenous_rna + day + cell_line`.

```{r}
dds <- DESeqDataSetFromMatrix(
  countData = feature_counts %>%
    tibble::column_to_rownames("Geneid") %>%
    dplyr::select(!Chr:Length),
  colData = sample_units,
  design = ~ exogenous_rna + day + cell_line
)
dds
```
#### Variance Stabalized Transformation

```{r}
vsd <- vst(dds, blind = FALSE)
```

#### Heatmap of sample-to-sample distances

```{r}
#| fig-height: 8
#| fig-width: 6
sample_dists <- dist(t(assay(vsd)))

sample_dist_matrix <- as.matrix(sample_dists)
rownames(sample_dist_matrix) <- paste(vsd$cell_line,
  vsd$exogenous_rna,
  paste0("day", vsd$day),
  sep = "-"
)
colnames(sample_dist_matrix) <- NULL
colors <- colorRampPalette(rev(brewer.pal(9, "Blues")))(255)
pheatmap(sample_dist_matrix,
  clustering_distance_rows = sample_dists,
  clustering_distance_cols = sample_dists,
  col = colors
)
```

#### PCA plot of samples
```{r}
plotPCA(vsd, intgroup = c("cell_line", "exogenous_rna", "day"))
```

## Differetial Expression

### Default DESeq2 size factors

These analyses use size factors calculated by DESeq2. They are based off the gene counts and attempt to account for outliers.

#### Calculate Differential Expression

Calculate the log2 fold change: `cell line` `P1E10` vs `Parental` 
```{r}
dds <- DESeq(dds, parallel = TRUE)
res <- results(dds, alpha = 0.05)
res
summary(res)
```

MA Plot
```{r}
plotMA(res, ylim = c(-5, 5))
```

Plot of counts for a single gene (with lowest adjusted p-value)
```{r}
plotCounts(dds, gene = which.min(res$padj), intgroup = "cell_line")
```


Run [log fold change shrinkage](http://bioconductor.org/packages/devel/bioc/vignettes/DESeq2/inst/doc/DESeq2.html#log-fold-change-shrinkage-for-visualization-and-ranking) to account for low counts.

```{r}
res_lfc <- lfcShrink(dds,
  coef = "cell_line_P1E10_vs_Parental",
  type = "apeglm", parallel = TRUE
)
```

MA Plot of shrunken log2 fold changes
```{r}
plotMA(res_lfc, ylim = c(-5, 5))
```


### Reads mapped to hg38 size factors

These analyses use size factors determined by the number of reads mapped to hg38. The size factor for a given sample is:
```
reads_mapped_to_hg38_sample / median(reads_mapped_to_hg38_all_samples)
```

This is similar to how we normalized the coverage plots (though admittedly, subtley different so that the factors scaled things similar to how DESeq2 usually works) 

```{r}
hg38_size_factors <- idxstats %>%
  dplyr::filter(sequence_name == "grch38_mapped_reads") %>%
  dplyr::select(sample, mapped_reads) %>%
  deframe()
dds_custom_sf <- dds
sizeFactors(dds_custom_sf) <- (hg38_size_factors / median(hg38_size_factors))
dds_custom_sf
```

Calculate the log2 fold change: `cell line` `P1E10` vs `Parental` 
```{r}
dds_custom_sf <- DESeq(dds_custom_sf, parallel = TRUE)
res_custom_sf <- results(dds_custom_sf, alpha = 0.05)
res_custom_sf
summary(res_custom_sf)
```


```{r}
plotMA(res_custom_sf, ylim = c(-5, 5))
```


```{r}
plotCounts(dds_custom_sf,
  gene = which.min(res_custom_sf$padj),
  intgroup = "cell_line"
)
```

Shrink log fold changes
```{r}
res_lfc_custom_sf <- lfcShrink(dds_custom_sf,
  coef = "cell_line_P1E10_vs_Parental",
  type = "apeglm", parallel = TRUE
)
```

```{r}
plotMA(res_lfc_custom_sf, ylim = c(-5, 5))
```


## Gene Biotype

For each `gene_id` in the featureCounts table, we look up the `gene_biotype` from Ensembl.

```{r}
hg38 <- EnsDb.Hsapiens.v86
hg38_genes <- genes(hg38, return.type = "data.frame")

counts_by_biotype <- feature_counts %>%
  full_join(hg38_genes %>% dplyr::select(gene_id, gene_biotype),
    by = c("Geneid" = "gene_id")
  ) %>%
  group_by(gene_biotype) %>%
  dplyr::select("gene_biotype", !c(Geneid, Chr, Start, End, Strand, Length)) %>%
  summarise_all(list(count = sum)) %>%
  tidyr::pivot_longer(!gene_biotype, names_to = "sample", values_to = "count")
counts_by_biotype
```


```{r fig.height=7}
p <- ggplot(
  data = subset(counts_by_biotype, !is.na(count)),
  aes(x = sample, y = count, fill = gene_biotype)
) +
  geom_bar(stat = "identity", position = "fill") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
p
```
