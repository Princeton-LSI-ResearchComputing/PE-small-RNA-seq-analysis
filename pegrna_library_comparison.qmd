---
title: "pegRNA Library Comparison"
author: "Lance Parsons"
format:
  html:
    toc: true
    code-fold: true
    df-print: paged
    embed-resources: true
editor: source
---

```{r}
#| label: load-packages
#| include: false
#| message: false
library("readr")
library("dplyr")
library("tidyr")
library("stringr")
library("tibble")
library("pheatmap")
library("ggplot2")
library("ggrepel")
library("DESeq2")
library("apeglm")
library("EnsDb.Hsapiens.v86")
library("RColorBrewer")
library("BiocParallel")
register(MulticoreParam(4))
```

## Read data

1. Get list of samples

```{r}
samples <- read_tsv("config/samples.tsv",
  col_types = list(
    sample_name = col_character(),
    cell_line = col_factor(),
    exogenous_rna = col_factor(),
    day = col_factor()
  )
)
units <- read_tsv("config/units.tsv",
  col_types = list(
    sample_name = col_character(),
    unit_name = col_character(),
    fq1 = col_character(),
    fq2 = col_character()
  )
)
sample_units <- dplyr::left_join(samples, units, by = "sample_name") %>%
  unite(sample_unit, sample_name, unit_name, remove = FALSE)
sample_units
```

2. Read Samtools `idxstats` to get human coverage for normalization

Notes:

* The counts include the total number of reads aligned, they 
  are not limited to uniquely aligned reads.
* The counts are reads, not pairs or fragments

```{r}
idxstats_exogenousrna_dir <-
  "results/samtools_idxstats/exogenous_rna/"

idxstats_human_dir <-
  "results/samtools_idxstats/Homo_sapiens.GRCh38.dna.primary_assembly/"

bowtie2_human_logs <-
  "results/logs/bowtie2/Homo_sapiens.GRCh38.dna.primary_assembly/"

idxstats <- tibble()

for (row in seq_len(nrow(sample_units))) {
  sample <- sample_units[row, ]$sample_unit

  # Read `idsxstats` for exogenous mapped reads
  exogenous_rna_stats <- read_tsv(
    file.path(idxstats_exogenousrna_dir, sprintf("%s.bam.idxstats", sample)),
    col_names = c(
      "sequence_name", "sequence_length",
      "mapped_reads", "unmapped_reads"
    ),
    col_types = "ciii"
  )
  exogenous_rna_mapped_reads <- exogenous_rna_stats %>%
    dplyr::filter(!sequence_name %in% c("*")) %>%
    dplyr::select(sequence_name, mapped_reads) %>%
    dplyr::mutate(sample = sample)

  # Read `idxstats` for human mapped reads
  human_stats <- read_tsv(
    file.path(idxstats_human_dir, sprintf("%s.bam.idxstats", sample)),
    col_names = c(
      "sequence_name", "sequence_length",
      "mapped_reads", "unmapped_reads"
    ),
    col_types = "ciii"
  )
  grch38_mapped_reads <- human_stats %>%
    dplyr::filter(!sequence_name %in% c("*")) %>%
    dplyr::select(mapped_reads) %>%
    sum()
  grch38_mapped_reads <- tibble(
    sequence_name = "grch38_mapped_reads",
    mapped_reads = grch38_mapped_reads,
    sample = sample
  )

  # Read bowtie2 logs for unmapped reads
  bowtie2_log <- readLines(
    file.path(bowtie2_human_logs, sprintf("%s.log", sample))
  )
  total_pairs <- strtoi(str_split(bowtie2_log[1], " ")[[1]][1])
  total_reads <- total_pairs * 2
  unmapped_reads <- tibble(
    sequence_name = "unmapped",
    mapped_reads = total_reads - grch38_mapped_reads$mapped_reads,
    sample = sample
  )

  # Consolidate counts for rows
  idxstats <- rbind(
    idxstats,
    exogenous_rna_mapped_reads,
    grch38_mapped_reads,
    unmapped_reads
  )
}
idxstats
```

## Biotype comparison

* count only fragments that were properly aligned
* annotate with GENCODE gene model
* primary alignments were counted, even if the fragments aligned multiple times
* fragments aligning to multiple features were assigned to the feature that mostly closely overlapped with the fragment

```{r import_biotype_counts}
human_counts_dir <- "results/smrna_count/"
biotype_counts_files <- paste0(
  human_counts_dir,
  sample_units$sample_unit,
  "_first_proper_pair_biotype_count.txt"
)
exogenous_counts_dir <- "results/exogenous_rna_count/"
exogenous_counts_files <- paste0(
  exogenous_counts_dir,
  sample_units$sample_unit,
  "_idxstats.txt"
)

biotype_counts <- readr::read_tsv(
  biotype_counts_files[1],
  comment = "#",
  col_names = c("biotype", biotype_counts_files[1]),
  col_types = "ci"
)
exogenous_counts <- read_tsv(
  exogenous_counts_files[1],
  col_names = c("exogenous_rna", exogenous_counts_files[1]),
  col_types = "c-i-"
)
biotype_counts <- biotype_counts %>%
  dplyr::add_row(
    biotype = "exogenous_rna",
    "{biotype_counts_files[1]}" := sum(exogenous_counts[[exogenous_counts_files[1]]])
  )

for (i in 2:length(biotype_counts_files)) {
  biotype_sample <-
    readr::read_tsv(
      biotype_counts_files[i],
      comment = "#",
      col_names = c("biotype", biotype_counts_files[i]),
      col_types = "ci"
    )

  exogenous_counts_sample <-
    readr::read_tsv(
      exogenous_counts_files[i],
      col_names = c("exogenous_rna", exogenous_counts_files[i]),
      col_types = "c-i-"
    )

  biotype_sample <- biotype_sample %>%
    dplyr::add_row(
      biotype = "exogenous_rna",
      "{biotype_counts_files[i]}" :=
        sum(exogenous_counts_sample[[exogenous_counts_files[i]]])
    )

  biotype_counts <- biotype_counts %>%
    dplyr::full_join(biotype_sample, by = "biotype")
}

biotype_counts <- biotype_counts %>%
  rename_all(~ stringr::str_replace_all(
    ., human_counts_dir, ""
  )) %>%
  rename_all(~ stringr::str_replace_all(., "_first_proper_pair_biotype_count.txt", "")) %>%
  tidyr::pivot_longer(!biotype, names_to = "sample", values_to = "count")

biotype_counts
```

```{r fig.height=7, fig.width=16}
#| fig-height: 7
#| fig-width: 16
p <- ggplot(
  data = subset(biotype_counts, !is.na(count)),
  aes(x = sample, y = count, fill = biotype)
) +
  geom_bar(stat = "identity", position = "fill") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
p
```

## small RNA gene counts

* count only fragments that were properly aligned
* annotate with GENCODE gene model
* primary alignments were counted, even if the fragments aligned multiple times
* fragments aligning to multiple features were assigned to the feature that mostly closely overlapped with the fragment
* exogenous RNA counts are total fragments that aligned

```{r import_smrna_counts}
human_counts_dir <- "results/smrna_count/"
gene_counts_files <- paste0(
  human_counts_dir,
  sample_units$sample_unit,
  "_first_proper_pair_gene_count.txt"
)

exogenous_counts_dir <- "results/exogenous_rna_count/"
exogenous_counts_files <- paste0(
  exogenous_counts_dir,
  sample_units$sample_unit,
  "_idxstats.txt"
)

gene_counts <- readr::read_tsv(
  gene_counts_files[1],
  comment = "#",
  col_names = c("gene", gene_counts_files[1]),
  col_types = "ci"
)
exogenous_counts <- read_tsv(
  exogenous_counts_files[1],
  col_names = c("gene", gene_counts_files[1]),
  col_types = "c-i-"
)
gene_counts <- rbind(gene_counts, exogenous_counts)

for (i in 2:length(gene_counts_files)) {
  gene_sample <-
    readr::read_tsv(
      gene_counts_files[i],
      comment = "#",
      col_names = c("gene", gene_counts_files[i]),
      col_types = "ci"
    )
  exogenous_counts_sample <- read_tsv(
    exogenous_counts_files[i],
    col_names = c("gene", gene_counts_files[i]),
    col_types = "c-i-"
  )
  gene_sample <- rbind(gene_sample, exogenous_counts_sample)
  gene_counts <- gene_counts %>%
    dplyr::full_join(gene_sample, by = "gene")
}

gene_counts <- gene_counts %>%
  rename_all(~ stringr::str_replace_all(
    ., human_counts_dir, ""
  )) %>%
  rename_all(~ stringr::str_replace_all(., "_first_proper_pair_gene_count.txt", ""))

gene_counts
```

### Import sample metadata and counts into DESeq2

Read these counts into DESeq2 along with the sample metadata.

Set the design to `~ exogenous_rna + day + cell_line`.

```{r}
dds <- DESeqDataSetFromMatrix(
  countData = gene_counts %>%
    tibble::column_to_rownames("gene") %>%
    replace(is.na(.), 0),
  colData = sample_units,
  design = ~ exogenous_rna + day + cell_line
)
dds
```
### Sample comparisons

#### Variance Stabalized Transformation

```{r}
vsd <- vst(dds, blind = FALSE)
```

#### Heatmap of sample-to-sample distances

```{r}
sample_dists <- dist(t(assay(vsd)))

sample_dist_matrix <- as.matrix(sample_dists)
rownames(sample_dist_matrix) <- paste(vsd$cell_line,
  vsd$exogenous_rna,
  paste0("day", vsd$day),
  sep = "-"
)
colnames(sample_dist_matrix) <- NULL
```

```{r fig.height=8, fig.width=10}
#| fig-height: 8
#| fig-width: 10
colors <- colorRampPalette(rev(brewer.pal(9, "Blues")))(255)
pheatmap(sample_dist_matrix,
  clustering_distance_rows = sample_dists,
  clustering_distance_cols = sample_dists,
  col = colors
)
```

#### PCA plot of samples
```{r fig.height=4, fig.width=8}
#| fig-height: 6
#| fig-width: 6
plotPCA(vsd, intgroup = c("cell_line", "exogenous_rna", "day"))
```

### Differetial Expression

These analyses use size factors calculated by DESeq2. They are based off the gene counts and attempt to account for outliers.

Calculate the log2 fold change: `cell line` `P1E10` vs `Parental` 
```{r}
#| cache: true
dds <- DESeq(dds, parallel = TRUE)
```

```{r}
res <- results(dds, alpha = 0.05)
res
summary(res)
```

```{r}
# List of exogenous genes to highlight
exogenous_rna_names <- gene_counts %>%
  dplyr::filter(str_detect(gene, "^PJY")) %>%
  pull(gene)
```


#### MA Plot
```{r}
plotMA(res, ylim = c(-5, 5))
```

```{r fig.height=14, fig.width=14}
res_df <- res %>%
    as.data.frame() %>%
    rownames_to_column("gene") %>%
    dplyr::mutate(significant = padj < 0.05)

res_labelled <- res_df %>%
    dplyr::filter(gene %in% exogenous_rna_names)

ggplot(res_df,
       aes(x=log2(baseMean), y=log2FoldChange, colour=significant)) +
    geom_point() +
    ggrepel::geom_label_repel(data=res_labelled, aes(label=gene)) +
    theme_bw()
```


Plot of counts for a single gene (with lowest adjusted p-value)
```{r}
plotCounts(dds, gene = which.min(res$padj), intgroup = "cell_line")
```

### Log fold change shrinkage

Run [log fold change shrinkage](http://bioconductor.org/packages/devel/bioc/vignettes/DESeq2/inst/doc/DESeq2.html#log-fold-change-shrinkage-for-visualization-and-ranking) to account for low counts.

#### MA Plot (lfc shrunk)
```{r}
res_lfc <- lfcShrink(dds,
  coef = "cell_line_P1E10_vs_Parental",
  type = "apeglm", parallel = TRUE
)
```

MA Plot of shrunken log2 fold changes
```{r fig.height=14, fig.width=14}
res_lfc_df <- res_lfc %>%
    as.data.frame() %>%
    rownames_to_column("gene") %>%
    dplyr::mutate(significant = padj < 0.05)

res_lfc_labelled <- res_lfc_df %>%
    dplyr::filter(gene %in% exogenous_rna_names)

ggplot(res_lfc_df,
       aes(x=log2(baseMean), y=log2FoldChange, colour=significant)) +
    geom_point() +
    ggrepel::geom_label_repel(data=res_lfc_labelled, aes(label=gene)) +
    theme_bw()
```
